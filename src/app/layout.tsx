"use client"
import './globals.css'
import { Inter } from 'next/font/google'
import '@rainbow-me/rainbowkit/styles.css';
import {
  getDefaultWallets,
  RainbowKitProvider,
  // Chain
} from '@rainbow-me/rainbowkit';
import { configureChains, createConfig, WagmiConfig } from 'wagmi';
import { fantomTestnet, fantom } from 'wagmi/chains';
import { jsonRpcProvider } from "wagmi/providers/jsonRpc";
import { QueryClient, QueryClientProvider } from 'react-query';
// import { alchemyProvider } from 'wagmi/providers/alchemy';
// import { publicProvider } from 'wagmi/providers/public';

// import { Chain, getDefaultWallets } from '@rainbow-me/rainbowkit';
// import { configureChains, createConfig, WagmiConfig } from 'wagmi';
// import { Chain } from 'wagmi/chains';
// import { jsonRpcProvider } from 'wagmi/providers/jsonRpc';

// const HederaChain: Chain = {
//   id: 0x12a,
//   name: 'Hedera Testnet',
//   network: 'Hedra',
//   iconUrl: 'https://example.com/icon.svg',
//   iconBackground: '#fff',
//   nativeCurrency: {
//     decimals: 18,
//     name: 'HBAR',
//     symbol: 'HBAR',
//   },
//   rpcUrls: {
//     default: {
//       http: [""],
//     },
//   },
//   // blockExplorers: {
//   //   default: { name: 'SnowTrace', url: 'https://snowtrace.io' },
//   //   etherscan: { name: 'SnowTrace', url: 'https://snowtrace.io' },
//   // },
//   testnet: true,
// };
// https://ftm.getblock.io/&lt;api_key&gt;/testnet/

// PK411C6A5QX7VP2DFT5JHVMEHR7XR7IWG6 API key for testnet

const { chains, publicClient } = configureChains(
  [ fantomTestnet],
  [
    jsonRpcProvider({
      rpc: chain => ({ 
        http: `https://ftm.getblock.io/ebd5c137-ed80-43e4-805b-cd805544ad07/testnet/`
      })
    }),
  ]
);

const { connectors } = getDefaultWallets({
  appName: 'My RainbowKit App',
  projectId: 'YOUR_PROJECT_ID',
  chains
});

const wagmiConfig = createConfig({
  autoConnect: true,
  connectors,
  publicClient,
})

const inter = Inter({ subsets: ['latin'] })

// export const metadata = {
//   title: '',
//   description: 'Generated by create next app',
// }

const client = new QueryClient();

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">

      <body className={inter.className}>
         <WagmiConfig config={wagmiConfig}>
      <RainbowKitProvider chains={chains}>
        <QueryClientProvider client={client}>

        {children}
        </QueryClientProvider>
      </RainbowKitProvider>
      </WagmiConfig>
        </body>
    </html>
  )
}
